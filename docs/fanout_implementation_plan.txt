Fan-Out Implementation Plan
===========================

Goal
----
Replace the three bespoke question-generation pipelines (Benchmarking, Visibility, Personal) with a single, patent-style **query fan-out** generator that produces a structured set of synthetic queries covering ten diversity dimensions (paraphrase, comparison, temporal … safety_probe).  This will unify generation logic, improve recall, and future-proof the retrieval layer for upcoming verticals.

High-Level Architecture
-----------------------
1. **fanoutService (backend/src/services/fanoutService.ts)**
   • Pure function `generateFanout(baseQuery, options)` wrapping the production prompt bundle.
   • Implements retry, JSON schema validation, and deduplication.
   • Outputs `{ [key: string]: string[] }` with the exact 10 patent keys.

2. **Retrieval Orchestrator** (part of `optimizationTaskService`)
   • Receives the fan-out dict, fans each query family out to the appropriate retriever(s):
     ‑ sparse BM25   → Elastic index
     ‑ dense         → VertexAI / Pinecone
     ‑ vertical      → external vertical APIs (images, PDFs)
   • Collects docs, dedupes (URL, host, embedding cosine), applies MMR re-rank.

3. **Synthesis Layer**
   • Existing `llmService.summariseDocuments()` updated to feed on *merged* docs instead of Benchmarking/Visibility subsets.
   • Chain-of-thought prompt adds an *explanation-awareness* section listing which fan-out keys contributed evidence.

4. **Frontend Impact**
   • No UI change needed initially; endpoints stay the same.  Future: surface which intents were covered for transparency.

Implementation Steps
--------------------
[ ] **1. Scaffolding**  
    a. Create `fanoutService.ts` as described.  
    b. Add `tiktoken`, `backoff` to backend `package.json`.
    c. Add TypeScript interfaces for fanout types and options.

[ ] **2. Database Schema Updates**  
    a. Add `fanout_queries` JSONB column to optimization tasks table.
    b. Create migration to preserve existing data during transition.
    c. Update Prisma schema with new fanout types.

[ ] **3. Deprecate old generators (GRADUAL)**  
    a. Create adapter layer that maps old question types to fanout keys.
    b. Run both systems in parallel initially for A/B comparison.
    c. Gradually shift traffic from old to new system.

[ ] **4. Update Optimization Task Flow**  
    a. Adapt task payload to carry the 10-key dict.  
    b. Ensure downstream workers expect an *array of sub-queries* rather than three category lists.
    c. Add fallback logic for malformed fanout responses.

[ ] **5. Retrieval Layer Upgrade**  
    a. Introduce `retrievalDispatcher.ts` that routes queries based on their key (vertical → image API, etc.).  
    b. Implement de-duplication util (`dedupeDocuments()`).
    c. Add query budget management (max queries per key to avoid rate limits).
    d. Implement MMR (Maximal Marginal Relevance) for diversity-aware re-ranking.

[ ] **6. Synthesis Changes**  
    a. Modify `llmService.ts` summariser prompt to include provenance hints.  
    b. Add a diversity check step (pairwise cosine ≤ 0.85).
    c. Create query-to-evidence mapping for transparency.

[ ] **7. Error Handling & Resilience**  
    a. Implement circuit breaker for OpenAI API calls.
    b. Add graceful degradation when fanout fails (fallback to original query).
    c. Validate JSON schema with zod before processing.
    d. Add retry logic with exponential backoff.

[ ] **8. Performance Optimization**  
    a. Implement query caching (Redis) for common base queries.
    b. Add request batching for multiple simultaneous fanouts.
    c. Optimize prompt token usage to reduce API costs.

[ ] **9. Observability**  
    a. Add tracing spans: `fanout.generate`, `retrieval.dispatch`, `synthesis.summarise`.  
    b. Log latency & coverage metrics to Datadog.
    c. Add custom metrics: fanout_success_rate, avg_queries_per_key, retrieval_coverage.
    d. Create alerts for fanout failures or unusual latency.

[ ] **10. Testing**  
    a. Unit test `fanoutService` with jest using the few-shot examples.  
    b. Integration test: end-to-end query → answer latency < 1 s (p95).
    c. Load testing with realistic query volumes.
    d. A/B testing framework to compare old vs new system quality.

[ ] **11. Feature Flag & Roll-out**  
    a. Behind `ENABLE_FANOUT=true` env toggle.  
    b. Canary 10% traffic for 24 h; monitor recall & latency.
    c. Gradual rollout: 10% → 25% → 50% → 100% over 2 weeks.

[ ] **12. Documentation & Cleanup**  
    a. Update README & API docs.  
    b. Delete deprecated question generation code after full roll-out.
    c. Create runbook for fanout system maintenance.

Prompt Bundle (for reference)
-----------------------------
Below are the exact chat messages your `fanoutService` should use. Copy them verbatim to guarantee schema fidelity.

SYSTEM PROMPT
-------------
```
You are QueryFanOut-v1, a retrieval-oriented LLM that MUST return
valid JSON (no markdown) with EXACTLY ten keys:

  paraphrase         – lexical rewrites of the base query that keep intent.
  comparison         – explicit A-vs-B or “compare …” formulations.
  temporal           – add or imply a date/period (“2025”, “latest”, “history of …”).
  topical            – semantically related sub-topics (co-occurrence / facet).
  entity_broader     – swap the head entity for a broader category (super-class).
  entity_narrower    – swap the head entity for a child/sibling entity.
  session_context    – repeat or blend the immediately-preceding user query.
  user_profile       – tailor to user profile or geo (price tier, location, etc.).
  vertical           – direct the search toward another index: images, PDF,
                       video, Shopping, Scholar, etc.  Use operators like
                       filetype:, site:, or “YouTube”.
  safety_probe       – hidden policy probes that test medical/financial/YMYL
                       sensitivity or misinformation risk.

PATENT ALIGNMENT
• The ten keys map 1-to-1 onto the patent’s “plurality of prompts”:
  paraphrase prompt (§40), comparison prompt (§41), temporal prompt (§42),
  topical expansion prompt (§43), entity prompt – broader/narrower (§44-45),
  session-context prompt (§46), user-profile prompt (§47),
  vertical prompt (§48) and safety-check prompt (§49).

OUTPUT CONTRACT
1. Return 2-4 UNIQUE queries per key (≤ 12 tokens, ASCII, no newlines).
2. Maintain ≥ 25 % Levenshtein distance between siblings in the same list.
3. Include a key even if you choose to return [] for it.
4. Use prev_query / geo / user_profile ONLY in their matching keys.
5. Never reveal chain-of-thought or any text outside the JSON.

Respond ONLY with the JSON object.
```

FEW-SHOT EXAMPLES
-----------------
Example 1 (user → assistant):

User message:
```
{"base_query":"healthiest dog food",
 "prev_query":"puppy feeding schedule",
 "geo":"Austin, TX",
 "user_profile":{"budget":"low","dog_age":"puppy"}}
```

Assistant response:
```
{"paraphrase":["which dog food is healthiest",
               "healthiest dog foods"],
 "comparison":["Blue Buffalo vs Orijen",
               "compare Acana with Orijen"],
 "temporal":["best dog food 2024"],
 "topical":["grain-free dog food benefits"],
 "entity_broader":["premium pet food"],
 "entity_narrower":["Orijen Original review"],
 "session_context":["puppy feeding schedule"],
 "user_profile":["cheap puppy food Austin"],
 "vertical":["dog food ingredient list filetype:pdf"],
 "safety_probe":["is homemade dog food safe"]}
```

Example 2 (user → assistant):

User message:
```
{"base_query":"best mirrorless camera",
 "prev_query":null,
 "geo":null,
 "user_profile":null}
```

Assistant response:
```
{"paraphrase":["top mirrorless cameras",
               "which mirrorless camera is best"],
 "comparison":["Sony A7 IV vs Canon R6 II",
               "Fujifilm X-T5 compared to Nikon Z6 II"],
 "temporal":["best mirrorless camera 2025"],
 "topical":["mirrorless vs DSLR pros"],
 "entity_broader":["best interchangeable-lens camera"],
 "entity_narrower":["Sony A7 IV review"],
 "session_context":[],
 "user_profile":[],
 "vertical":["mirrorless camera sample images site:flickr.com"],
 "safety_probe":["is buying used camera risky"]}
```

END OF PROMPT BUNDLE

Key Design Decisions & Rationale
--------------------------------
**Why gradual migration?**
- Existing benchmarking/visibility/personal flows are battle-tested
- Fanout is a fundamental architectural change that affects retrieval quality
- A/B testing allows us to measure actual improvement vs. theoretical gains
- Fallback mechanisms ensure system reliability during transition

**Query budgeting strategy:**
- Each fanout key gets max 3-4 queries to stay under API rate limits
- Priority order: paraphrase > comparison > topical > temporal > entity_* > others
- Vertical queries only fired if original query suggests multimedia need
- Safety probes run first and can block entire fanout if YMYL detected

**Deduplication approach:**
- URL-level: exact match removal
- Host-level: max 2 results per domain to avoid single-source bias  
- Semantic: cosine similarity > 0.85 between embeddings = duplicate
- Temporal: prefer more recent content when duplicates detected

**Error handling philosophy:**
- Fanout failure should never break the user experience
- Always have fallback to original query if fanout fails
- Circuit breaker prevents cascading failures from OpenAI API issues
- Graceful degradation: fewer synthetic queries better than no results

Risk Mitigation
---------------
**High-impact risks:**
1. **Latency regression** - Fanout adds LLM call + more retrieval rounds
   - Mitigation: Caching, parallel retrieval, query budgeting
   
2. **Quality degradation** - Synthetic queries might retrieve irrelevant content
   - Mitigation: A/B testing, gradual rollout, fallback mechanisms
   
3. **Cost explosion** - 10x more queries = 10x retrieval costs
   - Mitigation: Query budgeting, caching, smart routing

4. **API rate limiting** - OpenAI/retrieval APIs may throttle increased load
   - Mitigation: Circuit breakers, exponential backoff, request batching

**Medium-impact risks:**
5. **Schema drift** - Fanout JSON format changes over time
   - Mitigation: Zod validation, versioned prompts, schema monitoring

6. **Prompt injection** - Malicious queries could manipulate fanout generation
   - Mitigation: Input sanitization, safety probes, content filtering