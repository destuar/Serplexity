generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(cuid())
  email              String     @unique
  name               String?
  password           String?
  role               Role       @default(USER)
  provider           String     @default("credentials")
  providerId         String?
  tokenVersion       Int        @default(0)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  stripeCustomerId   String?    @unique
  subscriptionStatus String?
  modelPreferences   Json?      @default("{\"gpt-4.1-mini\":true,\"claude-3-5-haiku-20241022\":true,\"gemini-2.5-flash\":true,\"sonar\":true}")
  blogPosts          BlogPost[]
  companies          Company[]
}

model Company {
  id                  String                       @id @default(cuid())
  name                String
  website             String                       @unique
  industry            String?
  userId              String
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  user                User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
  competitors         Competitor[]
  questions           Question[]
  mentions            Mention[]
  reportMetrics       ReportMetric[]
  runs                ReportRun[]
  sentimentOverTime   SentimentOverTime[]
  shareOfVoiceHistory ShareOfVoiceHistory[]
  optimizationTasks   VisibilityOptimizationTask[]

  @@index([userId])
}

model Competitor {
  id          String    @id @default(cuid())
  name        String
  companyId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  website     String
  isGenerated Boolean   @default(false)
  isAccepted  Boolean?  // null = not decided, true = accepted, false = declined
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  mentions    Mention[]

  @@unique([companyId, website])
  @@index([companyId])
}

model Question {
  id        String     @id @default(cuid())
  text      String
  type      String     @default("research")
  companyId String
  runId     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  run       ReportRun  @relation(fields: [runId], references: [id], onDelete: Cascade)
  responses Response[]

  @@unique([text, companyId, runId])
  @@index([companyId])
  @@index([runId])
  @@index([type])
}

model ReportRun {
  id                  String                       @id @default(cuid())
  companyId           String
  status              String
  stepStatus          String?
  tokensUsed          Int?
  usdCost             Float?
  traceId             String?
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
  aiVisibilitySummary String?
  questions           Question[]
  responses           Response[]
  sentimentScores     SentimentScore[]
  reportMetrics       ReportMetric[]
  company             Company                      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sentimentOverTime   SentimentOverTime[]
  shareOfVoiceHistory ShareOfVoiceHistory[]
  optimizationTasks   VisibilityOptimizationTask[]

  @@index([companyId])
}

model SentimentScore {
  id        String    @id @default(cuid())
  runId     String
  version   Int       @default(1)
  name      String
  value     Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  engine    String?
  reportRun ReportRun @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@index([runId])
  @@map("Metric")
}

model Response {
  id         String     @id @default(cuid())
  questionId String
  content    String
  model      String
  engine     String
  runId      String
  metadata   Json?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  run        ReportRun  @relation(fields: [runId], references: [id], onDelete: Cascade)
  citations  Citation[]
  mentions   Mention[]

  @@index([questionId])
  @@index([runId])
  @@index([engine])
  @@index([model])
}

model Mention {
  id           String      @id @default(cuid())
  responseId   String
  position     Int
  competitorId String?
  companyId    String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  company      Company?    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  competitor   Competitor? @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  response     Response    @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([competitorId])
  @@index([companyId])
  @@index([responseId, companyId])
  @@index([responseId, competitorId])
}

model Citation {
  id         String   @id @default(cuid())
  responseId String
  url        String
  title      String
  domain     String
  accessedAt DateTime
  position   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@index([responseId])
  @@index([domain])
  @@index([url])
  @@index([responseId, position])
}

model ReportMetric {
  id                     String    @id @default(cuid())
  reportId               String
  companyId              String
  aiModel                String
  shareOfVoice           Float
  shareOfVoiceChange     Float?
  averageInclusionRate   Float
  averageInclusionChange Float?
  averagePosition        Float
  averagePositionChange  Float?
  sentimentScore         Json?
  sentimentChange        Float?
  topRankingsCount       Int?
  rankingsChange         Float?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  competitorRankings     Json?
  topQuestions           Json?
  sentimentDetails       Json?
  company                Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  report                 ReportRun @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@unique([reportId, aiModel])
  @@index([companyId])
}

model ShareOfVoiceHistory {
  id           String    @id @default(cuid())
  companyId    String
  date         DateTime  @db.Date
  aiModel      String
  shareOfVoice Float
  reportRunId  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  reportRun    ReportRun @relation(fields: [reportRunId], references: [id], onDelete: Cascade)

  @@unique([companyId, date, aiModel])
  @@index([companyId, aiModel])
}

model SentimentOverTime {
  id             String    @id @default(cuid())
  companyId      String
  date           DateTime  @db.Date
  aiModel        String
  sentimentScore Float
  reportRunId    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  company        Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  reportRun      ReportRun @relation(fields: [reportRunId], references: [id], onDelete: Cascade)

  @@unique([companyId, date, aiModel])
  @@index([companyId, aiModel])
}

model VisibilityOptimizationTask {
  id           String    @id @default(cuid())
  taskId       String
  reportRunId  String
  companyId    String
  title        String
  description  String
  category     String
  priority     String
  impactMetric String
  dependencies Json
  isCompleted  Boolean   @default(false)
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  status       String    @default("NOT_STARTED")
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  reportRun    ReportRun @relation(fields: [reportRunId], references: [id], onDelete: Cascade)

  @@unique([reportRunId, taskId])
  @@index([companyId])
  @@index([reportRunId])
  @@index([status])
}

model BlogPost {
  id                String      @id @default(cuid())
  title             String
  slug              String      @unique
  content           String
  excerpt           String?
  coverImage        String?
  published         Boolean     @default(false)
  publishedAt       DateTime?
  authorId          String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  canonicalUrl      String?
  estimatedReadTime Int?
  metaDescription   String?
  metaTitle         String?
  openGraphImage    String?
  tags              String[]
  twitterCard       String?     @default("summary_large_image")
  media             BlogMedia[]
  author            User        @relation(fields: [authorId], references: [id])

  @@index([published])
  @@index([publishedAt])
  @@index([authorId])
  @@index([slug])
  @@index([tags])
}

model BlogMedia {
  id         String   @id @default(cuid())
  url        String
  filename   String
  mimeType   String
  size       Int
  alt        String?
  blogPostId String
  createdAt  DateTime @default(now())
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  @@index([blogPostId])
}

enum Role {
  USER
  ADMIN
}
