generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  name               String?
  password           String?
  role               Role      @default(USER)
  provider           String    @default("credentials")
  providerId         String?
  tokenVersion       Int       @default(0)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  stripeCustomerId   String?   @unique
  subscriptionStatus String?
  companies          Company[]
}

model Company {
  id                    String                 @id @default(cuid())
  name                  String
  website               String
  industry              String?
  userId                String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  benchmarkMentions     BenchmarkMention[]
  benchmarkingQuestions BenchmarkingQuestion[]
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  competitors           Competitor[]
  personalMentions      PersonalMention[]
  personalQuestions     PersonalQuestion[]
  products              Product[]
  runs                  ReportRun[]
  mentions              VisibilityMention[]
  reportMetrics         ReportMetric[]

  @@index([userId])
}

model Competitor {
  id                String              @id @default(cuid())
  name              String
  companyId         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  website           String
  isGenerated       Boolean             @default(false)
  benchmarkMentions BenchmarkMention[]
  company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  personalMentions  PersonalMention[]
  mentions          VisibilityMention[]

  @@index([companyId])
  @@unique([companyId, website])
}

model BenchmarkingQuestion {
  id                 String                 @id @default(cuid())
  text               String
  companyId          String
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  isGenerated        Boolean                @default(false)
  originalQuestionId String?
  benchmarkResponses BenchmarkResponse[]
  company            Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  originalQuestion   BenchmarkingQuestion?  @relation("Variations", fields: [originalQuestionId], references: [id], onDelete: NoAction)
  variations         BenchmarkingQuestion[] @relation("Variations")

  @@index([companyId])
  @@index([originalQuestionId])
}

model Product {
  id                  String               @id @default(cuid())
  name                String
  companyId           String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  company             Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  visibilityQuestions VisibilityQuestion[]

  @@index([companyId])
}

model VisibilityQuestion {
  id        String               @id @default(cuid())
  question  String
  productId String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  product   Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  responses VisibilityResponse[]

  @@index([productId])
}

model ReportRun {
  id                  String               @id @default(cuid())
  companyId           String
  status              String
  stepStatus          String?
  tokensUsed          Int?
  usdCost             Float?
  traceId             String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  benchmarkResponses  BenchmarkResponse[]
  sentimentScores     SentimentScore[]
  personalResponses   PersonalResponse[]
  company             Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  visibilityResponses VisibilityResponse[]
  reportMetrics       ReportMetric[]

  @@index([companyId])
}

model SentimentScore {
  id        String    @id @default(cuid())
  runId     String
  version   Int       @default(1)
  name      String
  value     Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  engine    String?
  reportRun ReportRun @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@index([runId])
  @@map("Metric")
}

model VisibilityResponse {
  id                   String              @id @default(cuid())
  visibilityQuestionId String
  engine               String
  model                String
  content              String
  runId                String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  mentions             VisibilityMention[]
  run                  ReportRun           @relation(fields: [runId], references: [id], onDelete: Cascade)
  question             VisibilityQuestion  @relation(fields: [visibilityQuestionId], references: [id], onDelete: Cascade)

  @@index([visibilityQuestionId])
  @@index([runId])
}

model BenchmarkResponse {
  id                  String               @id @default(cuid())
  benchmarkQuestionId String
  engine              String
  model               String
  content             String
  runId               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  benchmarkMentions   BenchmarkMention[]
  benchmarkQuestion   BenchmarkingQuestion @relation(fields: [benchmarkQuestionId], references: [id], onDelete: Cascade)
  run                 ReportRun            @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@index([benchmarkQuestionId])
  @@index([runId])
}

model VisibilityMention {
  id                   String             @id @default(cuid())
  visibilityResponseId String
  position             Int
  competitorId         String?
  companyId            String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  company              Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  competitor           Competitor?        @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  visibilityResponse   VisibilityResponse @relation(fields: [visibilityResponseId], references: [id], onDelete: Cascade)

  @@index([visibilityResponseId])
  @@index([competitorId])
  @@index([companyId])
}

model BenchmarkMention {
  id                  String            @id @default(cuid())
  benchmarkResponseId String
  position            Int
  competitorId        String?
  companyId           String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  benchmarkResponse   BenchmarkResponse @relation(fields: [benchmarkResponseId], references: [id], onDelete: Cascade)
  company             Company?          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  competitor          Competitor?       @relation(fields: [competitorId], references: [id], onDelete: Cascade)

  @@index([benchmarkResponseId])
  @@index([competitorId])
  @@index([companyId])
}

model PersonalQuestion {
  id        String             @id @default(cuid())
  question  String
  companyId String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  company   Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  responses PersonalResponse[]

  @@index([companyId])
}

model PersonalResponse {
  id                 String            @id @default(cuid())
  personalQuestionId String
  engine             String
  model              String
  content            String
  runId              String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  mentions           PersonalMention[]
  question           PersonalQuestion  @relation(fields: [personalQuestionId], references: [id], onDelete: Cascade)
  run                ReportRun         @relation(fields: [runId], references: [id], onDelete: Cascade)

  @@index([personalQuestionId])
  @@index([runId])
}

model PersonalMention {
  id                 String           @id @default(cuid())
  personalResponseId String
  position           Int
  competitorId       String?
  companyId          String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  company            Company?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  competitor         Competitor?      @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  personalResponse   PersonalResponse @relation(fields: [personalResponseId], references: [id], onDelete: Cascade)

  @@index([personalResponseId])
  @@index([competitorId])
  @@index([companyId])
}

model ReportMetric {
  id                        String    @id @default(cuid())
  reportId                  String
  companyId                 String
  aiModel                   String    // "all", "gpt-4o", "gemini-1.5-pro", etc.
  
  // Brand Share of Voice metrics
  shareOfVoice              Float
  shareOfVoiceChange        Float?
  
  // Average Inclusion Rate metrics  
  averageInclusionRate      Float
  averageInclusionChange    Float?
  
  // Average Position metrics
  averagePosition           Float
  averagePositionChange     Float?
  
  // Sentiment metrics
  sentimentScore            Float?
  sentimentChange           Float?
  
  // Rankings metrics
  topRankingsCount          Int?
  rankingsChange            Int?
  
  // Detailed sentiment score rows (JSON array of SentimentScore records)
  sentimentDetails         Json?
  
  // New fields for complex, pre-computed data
  competitorRankings        Json?
  topQuestions              Json?
  sentimentOverTime         Json?
  shareOfVoiceHistory       Json?
  
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  
  // Relations
  report                    ReportRun @relation(fields: [reportId], references: [id], onDelete: Cascade)
  company                   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([reportId, aiModel])
  @@index([companyId, aiModel])
  @@index([reportId])
}

enum Role {
  USER
  ADMIN
}
