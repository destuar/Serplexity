/**
 * @file LlmSerpPane.tsx
 * @description This component displays search results generated by a Large Language Model (LLM).
 * It allows users to select different AI models and view their responses to a given query in a chat-like interface.
 * The component handles loading states, error display, and formatting of LLM responses.
 *
 * @dependencies
 * - react: The core React library for component logic, state management, and lifecycle effects.
 * - react-markdown: For rendering Markdown content from LLM responses.
 * - ../ui/Card: A generic UI component for consistent styling and containment.
 * - ../../services/experimentalSearchService.ts: Service for interacting with the backend to fetch LLM search results.
 * - ../../types/dashboard: Contains type definitions and configurations for AI models (e.g., `MODEL_CONFIGS`, `getModelFilterOptions`).
 * - ../dashboard/FilterDropdown: UI component for selecting different AI models.
 * - ../../lib/responseFormatter: Utility for formatting raw LLM response text.
 * - remark-gfm: A remark plugin for GitHub Flavored Markdown support.
 *
 * @exports
 * - LlmSerpPane: React functional component for displaying LLM-generated search results.
 */
import React, { useEffect, useState, useRef, useCallback } from 'react';
import { Zap, Settings, X, ArrowRight, User } from 'lucide-react'; // Globe and ExternalLink removed as unused
import ReactMarkdown from 'react-markdown';
import { useNavigate } from 'react-router-dom';
import Card from '../ui/Card';
 
import { searchModels, type Citation } from '../../services/experimentalSearchService.ts';
import { MODEL_CONFIGS } from '../../types/dashboard';
import FilterDropdown from '../dashboard/FilterDropdown';
import { getModelFilterOptions } from '../../types/dashboard';
import { formatResponseText } from '../../lib/responseFormatter';
import { useAuth } from '../../hooks/useAuth';
import remarkGfm from 'remark-gfm';

interface Props {
  query: string;
  modelId: string;
  onModelChange: (modelId: string) => void;
}

interface ChatItem {
  engine: string;
  answer: string;
  latencyMs: number;
  // Enhanced search agent properties
  citations?: Citation[];
  hasWebSearch?: boolean;
  requestId?: string;
}

interface ApiError {
  response?: {
    data?: {
      error?: string;
    };
  };
  message?: string;
}



// Import the enhanced CitationBadge component
import CitationBadge from '../ui/CitationBadge';

// Response metadata component (currently unused)
// const ResponseMetadata: React.FC<{ 
//   item: ChatItem; 
//   modelDisplayName: string; 
// }> = ({ item, modelDisplayName }) => (
//   <div className="mt-3 flex items-center justify-between text-xs text-gray-500">
//     <div className="flex items-center gap-3">
//       {item.hasWebSearch && (
//         <div className="flex items-center gap-1 text-green-600">
//           <Globe className="w-3 h-3" />
//           <span>Web search</span>
//         </div>
//       )}
//     </div>
//     <span>â€” {modelDisplayName}</span>
//   </div>
// );

// Settings interface
interface ChatSettings {
  webSearchEnabled: boolean;
  temperature: number;
  persona: string;
}

const LlmSerpPane: React.FC<Props> = ({ query, modelId, onModelChange }) => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [answers, setAnswers] = useState<ChatItem[]>([]);
  const [showSettings, setShowSettings] = useState(false);
  const [showPaywall, setShowPaywall] = useState(false);
  
  // Check if user has subscription OR is admin - both get full access
  const hasFullAccess = user?.subscriptionStatus === 'active' || 
                       user?.role === 'ADMIN' ||
                       (user?.subscriptionStatus === 'trialing' && user?.trialEndsAt && new Date() < new Date(user.trialEndsAt));
  const [settings, setSettings] = useState<ChatSettings>({
    webSearchEnabled: false,
    temperature: 0.7,
    persona: ''
  });
  const [lastSearchSettings, setLastSearchSettings] = useState<ChatSettings>({
    webSearchEnabled: false,
    temperature: 0.7,
    persona: ''
  });

  const aiModelOptions = getModelFilterOptions().filter((o) => o.value !== 'all');

  const scrollRef = useRef<HTMLDivElement | null>(null);

  // Handle model changes with access check (admins and subscribers get full access)
  const handleModelChange = (newModelId: string) => {
    console.log('Model change attempted:', newModelId);
    // Check if user has full access for non-ChatGPT models
    if (!hasFullAccess && newModelId !== 'gpt-4.1-mini') {
      console.log('Subscription or admin access required for non-ChatGPT model, showing paywall');
      setShowPaywall(true);
      return;
    }
    onModelChange(newModelId);
  };

  // Handle settings changes with access check (admins and subscribers get full access)
  const handleSettingsChange = (newSettings: Partial<ChatSettings>) => {
    console.log('Settings change attempted:', newSettings);
    if (!hasFullAccess) {
      console.log('Subscription or admin access required for settings change, showing paywall');
      setShowPaywall(true);
      return;
    }
    setSettings(prev => ({ ...prev, ...newSettings }));
  };

  // Check if settings have changed since last search
  const settingsChanged = () => {
    return (
      settings.webSearchEnabled !== lastSearchSettings.webSearchEnabled ||
      settings.temperature !== lastSearchSettings.temperature ||
      settings.persona !== lastSearchSettings.persona
    );
  };

  // Function to execute search with current settings
  const executeSearch = useCallback(async (searchQuery: string, searchModelId: string) => {
    if (!searchQuery.trim()) return;
    
    console.log('Executing search with settings:', settings);
    setLoading(true);
    setAnswers([]);
    
    try {
      // Construct query with persona if provided
      const finalQuery = settings.persona 
        ? `${settings.persona}\n\n${searchQuery}` 
        : searchQuery;
      
      const res = await searchModels(finalQuery, searchModelId, settings);
      const formatted = res.map((item) => ({
        ...item,
        answer: formatResponseText(item.answer),
      }));

      if (formatted.length === 0 || formatted[0].answer.trim() === '') {
        setAnswers([{ engine: searchModelId, answer: '**No answer returned.**', latencyMs: 0 }]);
      } else {
        setAnswers(formatted);
      }
      
      // Update last search settings
      setLastSearchSettings({ ...settings });
    } catch (err: unknown) {
      console.error('Failed to fetch model answer:', err);
      const msg = (err as ApiError)?.response?.data?.error || (err as ApiError)?.message || 'Unknown error';
      // Show the error as a pseudo-answer so it appears in the chat stream
      setAnswers([{ engine: searchModelId, answer: `**Error:** ${msg}` , latencyMs: 0 }]);
    } finally {
      setLoading(false);
    }
  }, [settings]);

  // Only run search when query or modelId changes (NOT when settings change)
  useEffect(() => {
    if (!query) {
      setAnswers([]); // Clear answers when no query
      return;
    }
    
    executeSearch(query, modelId);
  }, [query, modelId, executeSearch]); // Include executeSearch in dependencies

  // Auto-scroll to bottom when a new answer arrives
  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [answers]);

  return (
    <Card className="h-full flex flex-col overflow-hidden p-4 relative">
      {/* Header with model dropdown and settings */}
      <div className="flex items-center justify-between gap-2 mb-3 sticky top-0 bg-white/80 backdrop-blur z-10 py-1">
        <div className="[&>div>button]:!bg-white/95 [&>div>button]:hover:!bg-white [&_div[class*='bg-white/80']]:!bg-white/95">
          <FilterDropdown
            label="Model"
            value={modelId}
            options={aiModelOptions}
            onChange={(v) => handleModelChange(v as string)}
            icon={undefined}
            disabled={loading}
          />
        </div>
        
        {/* Settings button */}
        <button
          onClick={() => setShowSettings(!showSettings)}
          className="p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-md transition-colors relative"
          title="Chat Settings"
        >
          <Settings className="w-4 h-4" />
        </button>
      </div>

      {/* Settings panel with UI/UX matching design system */}
      {showSettings && (
        <div className="absolute top-16 left-4 right-4 z-20 bg-white/80 backdrop-blur-sm rounded-lg shadow-md border border-white/20 p-4">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-sm font-semibold text-gray-900">Chat Settings</h3>
            <button
              onClick={() => setShowSettings(false)}
              className="p-1 text-gray-400 hover:text-gray-600 transition-colors rounded-sm hover:bg-gray-100"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
          
          <div className="space-y-5">
            {/* Web Search Toggle */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div>
                  <label className="text-sm font-medium text-gray-900">Live Web Search</label>
                  <p className="text-xs text-gray-500">Access real-time information from the web</p>
                </div>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  checked={settings.webSearchEnabled}
                  onChange={(e) => handleSettingsChange({ webSearchEnabled: e.target.checked })}
                  className="sr-only peer"
                />
                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600 shadow-sm"></div>
              </label>
            </div>

            {/* Temperature Slider */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div>
                    <label className="text-sm font-medium text-gray-900">Temperature</label>
                    <p className="text-xs text-gray-500">Control response randomness and creativity</p>
                  </div>
                </div>
                <span className="text-sm font-mono text-gray-600 bg-gray-100 px-2 py-1 rounded-md min-w-[3rem] text-center">
                  {settings.temperature}
                </span>
              </div>
              <div className="px-1">
                <input
                  type="range"
                  min="0"
                  max="2"
                  step="0.1"
                  value={settings.temperature}
                  onChange={(e) => handleSettingsChange({ temperature: parseFloat(e.target.value) })}
                  className="w-full h-2 bg-gradient-to-r from-blue-200 via-purple-200 to-pink-200 rounded-lg appearance-none cursor-pointer slider [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:w-4 [&::-webkit-slider-thumb]:h-4 [&::-webkit-slider-thumb]:rounded-full [&::-webkit-slider-thumb]:bg-white [&::-webkit-slider-thumb]:shadow-md [&::-webkit-slider-thumb]:border-2 [&::-webkit-slider-thumb]:border-gray-300 [&::-webkit-slider-thumb]:cursor-pointer"
                />
                <div className="flex justify-between mt-1">
                  <span className="text-xs text-gray-400">Focused</span>
                  <span className="text-xs text-gray-400">Balanced</span>
                  <span className="text-xs text-gray-400">Creative</span>
                </div>
              </div>
            </div>

            {/* User Persona Input */}
            <div className="space-y-3">
              <div className="flex items-start gap-3">
                <div className="flex-1">
                  <label className="text-sm font-medium text-gray-900">User Persona (optional)</label>
                  <p className="text-xs text-gray-500 mb-2">Describe yourself to help the AI understand your context</p>
                  <textarea
                    placeholder="e.g., User is interested in technology and works in software development..."
                    value={settings.persona}
                    onChange={(e) => handleSettingsChange({ persona: e.target.value })}
                    className="w-full px-3 py-2.5 text-sm bg-black/5 backdrop-blur-sm border border-white/30 rounded-lg focus:outline-none focus:ring-2 focus:ring-white/20 resize-none shadow-[inset_0_1px_2px_rgba(0,0,0,0.1)]"
                    rows={2}
                  />
                  <p className="text-xs text-gray-400 mt-1.5">This acts like memory - helps the AI remember your interests and background</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Re-run button when settings changed */}
      {query && answers.length > 0 && settingsChanged() && !loading && (
        <div className="mb-3 flex justify-center">
          <button
            onClick={() => executeSearch(query, modelId)}
            className="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 transition-colors"
          >
            <Zap className="w-4 h-4" />
            Re-run with updated settings
          </button>
        </div>
      )}

      {/* loading indicator intentionally removed */}

      {/* Chat scroll area */}
      <div ref={scrollRef} className="flex-1 flex flex-col space-y-4 overflow-y-auto pr-3 pl-2 pb-3">
        {/* Center placeholder with mock SearchBar */}
        {!query && !loading && (
          <div className="flex-1 flex flex-col items-center mt-20 space-y-6">
            <p className="text-base text-gray-400">Where should we begin?</p>

            {/* Fake search bar */}
            <div className="w-full max-w-md flex items-center bg-white border border-gray-200 rounded-full shadow-sm px-4 py-2">
              <div className="text-gray-400 mr-4 cursor-pointer select-none">+</div>
              <input
                type="text"
                placeholder="Ask anything"
                className="flex-1 bg-transparent outline-none text-sm text-gray-900 placeholder-gray-400"
                disabled
              />
            </div>
          </div>
        )}

        {/* User prompt */}
        {query && (
          <div className="flex justify-end">
            <div className="flex items-start gap-3 max-w-[85%]">
              <div className="bg-white/80 backdrop-blur-sm border border-white/20 rounded-2xl shadow-md px-4 py-3 rounded-tr-md">
                <p className="text-gray-900 text-sm leading-relaxed whitespace-pre-line">{query}</p>
              </div>
              <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
                <User size={16} className="text-gray-600" />
              </div>
            </div>
          </div>
        )}

        {/* Enhanced typing indicator */}
        {loading && query && (
          <div className="flex justify-start">
            <div className="flex items-start gap-3 max-w-[85%]">
              <div className="w-8 h-8 bg-white rounded-full flex items-center justify-center flex-shrink-0 border border-gray-200">
                {MODEL_CONFIGS[modelId]?.logoUrl ? (
                  <img 
                    src={MODEL_CONFIGS[modelId].logoUrl} 
                    alt={MODEL_CONFIGS[modelId].displayName} 
                    className="w-5 h-5 rounded object-contain"
                  />
                ) : (
                  <span className="text-xs font-semibold text-gray-600">
                    {(MODEL_CONFIGS[modelId]?.displayName || modelId).charAt(0)}
                  </span>
                )}
              </div>
              <div className="rounded-2xl bg-white/20 backdrop-blur-lg border border-white/30 px-4 py-3 shadow-lg ring-1 ring-white/20 rounded-tl-md">
                <div className="flex items-center space-x-1">
                  <span className="block w-2 h-2 bg-gray-400 rounded-full animate-bounce [animation-delay:-0.3s]" />
                  <span className="block w-2 h-2 bg-gray-400 rounded-full animate-bounce [animation-delay:-0.15s]" />
                  <span className="block w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Model answer(s) */}
        {answers.map((a) => {
          const modelDisplayName = MODEL_CONFIGS[a.engine]?.displayName || a.engine;
          
          return (
            <div key={a.engine} className="flex justify-start">
              <div className="flex items-start gap-3 max-w-[85%]">
                <div className="w-8 h-8 bg-white rounded-full flex items-center justify-center flex-shrink-0 border border-gray-200">
                  {MODEL_CONFIGS[a.engine]?.logoUrl ? (
                    <img 
                      src={MODEL_CONFIGS[a.engine].logoUrl} 
                      alt={modelDisplayName} 
                      className="w-5 h-5 rounded object-contain"
                    />
                  ) : (
                    <span className="text-xs font-semibold text-gray-600">
                      {modelDisplayName.charAt(0)}
                    </span>
                  )}
                </div>
                <div className="flex flex-col">
                  <div className="bg-white/80 backdrop-blur-sm border border-white/20 rounded-2xl shadow-md px-4 py-3 rounded-tl-md">
                {/* Main response content */}
                <div className="text-sm text-gray-800 leading-relaxed [&_p]:mb-3 [&_p:last-child]:mb-0 [&_ul]:my-3 [&_ol]:my-3 [&_li]:my-1 [&_pre]:my-3 [&_blockquote]:my-3 [&_table]:my-4">
                  <ReactMarkdown 
                    remarkPlugins={[remarkGfm]}
                    components={{
                      // Enhanced paragraph renderer
                      p: ({ children }) => (
                        <p className="mb-3 leading-relaxed text-sm text-gray-800">
                          {children}
                        </p>
                      ),
                      
                      // Enhanced strong renderer
                      strong: ({ children }) => (
                        <strong className="font-semibold text-sm text-gray-900">
                          {children}
                        </strong>
                      ),
                      
                      // Enhanced list item renderer
                      li: ({ children }) => (
                        <li className="text-sm text-gray-800 my-1">
                          {children}
                        </li>
                      ),
                      
                      // Customize code blocks for better appearance
                      code: ({ className, children, ...props }) => {
                        const match = /language-(\w+)/.exec(className || '');
                        return match ? (
                          <pre className="bg-gray-100 rounded-md p-3 overflow-x-auto border border-gray-200 my-4">
                            <code className={className} {...props}>
                              {children}
                            </code>
                          </pre>
                        ) : (
                          <code className="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono text-gray-800" {...props}>
                            {children}
                          </code>
                        );
                      },
                      
                      // Enhanced blockquote styling
                      blockquote: ({ children }) => (
                        <blockquote className="border-l-4 border-gray-300 pl-4 italic text-gray-700 my-4">
                          {children}
                        </blockquote>
                      ),
                      
                      // Enhanced link styling
                      a: ({ href, children, ...props }) => (
                        <a 
                          href={href} 
                          target="_blank" 
                          rel="noopener noreferrer" 
                          className="text-blue-600 hover:text-blue-800 underline font-medium" 
                          {...props}
                        >
                          {children}
                        </a>
                      ),
                      
                      // Enhanced unordered list styling
                      ul: ({ children }) => (
                        <ul className="list-disc pl-6 space-y-1 my-3 text-sm text-gray-800">
                          {children}
                        </ul>
                      ),
                      
                      // Enhanced ordered list styling  
                      ol: ({ children }) => (
                        <ol className="list-decimal pl-6 space-y-1 my-3 text-sm text-gray-800">
                          {children}
                        </ol>
                      ),
                      
                      // Enhanced table styling for proper display
                      table: ({ children }) => (
                        <div className="overflow-x-auto my-6">
                          <table className="min-w-full divide-y divide-gray-300 border border-gray-200 rounded-lg">
                            {children}
                          </table>
                        </div>
                      ),
                      
                      thead: ({ children }) => (
                        <thead className="bg-gray-50">
                          {children}
                        </thead>
                      ),
                      
                      tbody: ({ children }) => (
                        <tbody className="bg-white divide-y divide-gray-200">
                          {children}
                        </tbody>
                      ),
                      
                      tr: ({ children }) => (
                        <tr className="hover:bg-gray-50 transition-colors">
                          {children}
                        </tr>
                      ),
                      
                      th: ({ children }) => (
                        <th className="px-4 py-3 text-left text-sm font-semibold text-gray-900">
                          {children}
                        </th>
                      ),
                      
                      td: ({ children }) => (
                        <td className="px-4 py-3 text-sm text-gray-800">
                          {children}
                        </td>
                      ),
                    }}
                  >
                    {a.answer}
                  </ReactMarkdown>
                </div>

                {/* Citations */}
                {a.citations && a.citations.length > 0 && (
                  <div className="mt-4 pt-3 border-t border-gray-200/50">
                    <div className="text-xs font-medium text-gray-600 mb-2">Sources:</div>
                    <div className="flex flex-wrap gap-1">
                      {a.citations.slice(0, 6).map((citation, index) => (
                        <CitationBadge key={citation.url} citation={citation} index={index} compact />
                      ))}
                      {a.citations.length > 6 && (
                        <span className="text-xs text-gray-500 px-2 py-1">
                          +{a.citations.length - 6} more
                        </span>
                      )}
                    </div>
                  </div>
                )}
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Paywall Modal */}
      {showPaywall && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white/80 backdrop-blur-sm border border-white/20 rounded-lg shadow-md w-full max-w-md mx-4 p-6">
            <div className="text-center">
              <h3 className="text-base font-semibold text-gray-900 mb-3">Serplexity Pro Required</h3>
              <p className="text-sm text-gray-600 mb-6">
                Additional models and settings require a subscription.
              </p>
              <div className="flex gap-3 justify-center">
                <button
                  onClick={() => setShowPaywall(false)}
                  className="px-4 py-2 text-sm text-gray-600 hover:text-gray-800 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={() => {
                    setShowPaywall(false);
                    navigate('/payment');
                  }}
                  className="px-6 py-2 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors inline-flex items-center gap-2"
                >
                  Upgrade Now
                  <ArrowRight className="h-4 w-4" />
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </Card>
  );
};

export default LlmSerpPane; 