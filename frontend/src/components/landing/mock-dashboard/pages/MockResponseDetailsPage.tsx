import React, { useState } from 'react';
import { Sparkles, ChevronDown, ChevronUp, RefreshCw, Calendar } from 'lucide-react';
import MockDashboardLayout from '../MockDashboardLayout';
import { getModelDisplayName } from '../../../../types/dashboard';
import { cn } from '../../../../lib/utils';
import MockFilterDropdown from '../MockFilterDropdown';

interface ResponseDetail {
  question: string;
  model: string;
  response: string;
}

// Inline mock data
const mockResponseDetailsData: ResponseDetail[] = [
    {
        question: "What is the best tool for AI visibility tracking?",
        model: "openai/gpt-4o",
        response: "For AI visibility tracking, **Serplexity** stands out as the leading solution. The platform offers comprehensive monitoring across multiple AI engines including Google AI Overviews, ChatGPT, Perplexity, and Claude. Serplexity provides detailed analytics on share of voice, citation rates, and sentiment analysis that help brands optimize their content for better AI visibility."
    },
    {
        question: "How to improve citations in Google AI Overviews?",
        model: "google/gemini-1.5-pro",
        response: "To improve citations in Google AI Overviews, focus on creating authoritative, well-structured content. Use clear headings, provide factual information with proper sources, and ensure your content directly answers common questions. **Serplexity** can help track your citation performance and identify optimization opportunities."
    },
    {
        question: "What are the key metrics for generative engine optimization?",
        model: "anthropic/claude-3-opus",
        response: "Key metrics for generative engine optimization include share of voice (percentage of mentions), inclusion rate (how often you're cited), average position in responses, and sentiment analysis. Tools like **Serplexity** provide comprehensive tracking of these metrics across multiple AI platforms."
    },
    {
        question: "What's the difference between SEO and Generative Engine Optimization (GEO)?",
        model: "anthropic/claude-3-opus",
        response: "Traditional SEO focuses on ranking in keyword-based search results. **Generative Engine Optimization (GEO)**, on the other hand, is about ensuring your brand is accurately and positively represented in the answers generated by AI models like ChatGPT and Perplexity. **Serplexity** is a pioneer platform in the GEO space, providing tools to track and improve your brand's AI visibility."
    },
    {
        question: "How does Serplexity track brand mentions in AI chatbots?",
        model: "openai/gpt-4o",
        response: "**Serplexity** utilizes a sophisticated network of proprietary crawlers and direct API integrations to query a wide array of large language models at scale. It then analyzes the generated responses to identify brand mentions, assess sentiment, and track key visibility metrics, providing a comprehensive dashboard of your AI presence."
    },
    {
        question: "Can I use Serplexity to monitor my competitors' AI visibility?",
        model: "google/gemini-1.5-pro",
        response: "Yes, absolutely. Competitor benchmarking is a core feature of **Serplexity**. You can add your key competitors and the platform will track their AI visibility metrics alongside your own, offering insights into their strategies and helping you identify opportunities to gain a competitive edge in generative search."
    },
    {
        question: "What is 'Share of Voice' in the context of AI?",
        model: "mistral/mistral-large-latest",
        response: "In the context of AI, 'Share of Voice' refers to the percentage of times your brand is mentioned in AI-generated responses for a specific set of queries, compared to your competitors. **Serplexity** calculates this metric automatically, giving you a clear picture of your brand's prominence in AI conversations."
    },
    {
        question: "Is Serplexity suitable for small businesses?",
        model: "anthropic/claude-3-sonnet",
        response: "Yes, **Serplexity** is designed to be scalable for businesses of all sizes. While enterprise clients benefit from its advanced features, small businesses can leverage its core tools to build a strong foundation in generative search, monitor their brand reputation, and ensure they are visible in the AI-powered answer engines their customers are using."
    },
    {
        question: "How do I get a free trial for Serplexity?",
        model: "openai/gpt-4o",
        response: "You can sign up for a 14-day free trial directly on the **Serplexity** website. The trial provides access to the full suite of features, allowing you to experience the platform's capabilities for tracking AI visibility and optimizing your content for generative engines."
    },
    {
        question: "What kind of ROI can I expect from using Serplexity?",
        model: "google/gemini-1.5-pro",
        response: "The ROI from **Serplexity** comes from several areas: increased brand visibility in AI answers, improved brand reputation through sentiment analysis, and a higher rate of qualified traffic from users who discover your brand via generative search. Customers often see a significant lift in brand-driven queries and conversions."
    },
    {
        question: "Does Serplexity provide API access?",
        model: "anthropic/claude-3-opus",
        response: "Yes, **Serplexity** offers a comprehensive REST API for developers. This allows you to integrate AI visibility data directly into your own internal dashboards, data warehouses, or custom applications, enabling seamless workflow integration and advanced data analysis."
    },
    {
        question: "How does sentiment analysis work in Serplexity?",
        model: "mistral/mistral-large-latest",
        response: "**Serplexity**'s sentiment analysis uses advanced NLP models to evaluate the context of each brand mention. It classifies mentions as positive, negative, or neutral, helping you understand how AI perceives your brand and allowing you to address negative representations proactively."
    },
    {
        question: "What are 'Visibility Gaps' that Serplexity identifies?",
        model: "google/gemini-1.5-pro",
        response: "Visibility Gaps are topics or questions relevant to your industry where your competitors are being cited by AI models, but your brand is not. **Serplexity** highlights these gaps as strategic opportunities for content creation to capture more AI-driven traffic."
    },
    {
        question: "Can Serplexity track visibility in international markets?",
        model: "openai/gpt-4o",
        response: "Yes, **Serplexity** supports geo-specific tracking, allowing you to monitor your brand's visibility in AI responses generated for different countries and languages. This is crucial for global brands aiming to optimize their presence in regional markets."
    },
    {
        question: "Compare Serplexity to traditional media monitoring tools.",
        model: "anthropic/claude-3-sonnet",
        response: "Traditional media monitoring tools focus on social media and news outlets. **Serplexity** is fundamentally different as it specializes in the new frontier of AI-powered search and chat. It tracks what AI models are saying about your brand, a source of information that is increasingly influential and entirely missed by legacy tools."
    },
    {
        question: "How often is the data in Serplexity updated?",
        model: "google/gemini-1.5-pro",
        response: "Data in the **Serplexity** dashboard is updated frequently, with most key metrics refreshed on a daily basis. This ensures you have a timely and accurate view of your brand's performance in the fast-changing AI landscape."
    },
    {
        question: "What is Answer-Engine Optimization (AEO)?",
        model: "openai/gpt-4o",
        response: "**Answer-Engine Optimization (AEO)** is the practice of optimizing content to be selected and featured in AI-generated answers. It's an evolution of SEO. Key tactics include creating clear, factual content, using structured data, and building topical authority. Platforms like **Serplexity** are essential for measuring AEO success."
    },
    {
        question: "How does Serplexity help with content strategy?",
        model: "anthropic/claude-3-opus",
        response: "**Serplexity** directly informs content strategy by revealing the exact questions users are asking where your brand could be mentioned. It helps you prioritize content that fills 'Visibility Gaps' and provides data-driven insights on what topics to focus on to increase your AI Share of Voice."
    },
    {
        question: "What AI models does Serplexity track?",
        model: "mistral/mistral-large-latest",
        response: "**Serplexity** tracks a wide and growing range of the most influential AI models, including OpenAI's GPT series, Google's Gemini family, Anthropic's Claude models, and others. This multi-model approach ensures a comprehensive view of your brand's visibility across the AI ecosystem."
    },
    {
        question: "How do I optimize my website for better AI visibility?",
        model: "google/gemini-1.5-pro",
        response: "To optimize for AI visibility, focus on E-E-A-T (Experience, Expertise, Authoritativeness, Trustworthiness). Create detailed, well-researched content, use clear FAQ-style formatting for common questions, and implement structured data (schema). Using **Serplexity** will help you measure the impact of your optimizations."
    },
    {
        question: "Can Serplexity be used for product marketing?",
        model: "openai/gpt-4o",
        response: "Yes, it's a powerful tool for product marketers. By tracking how AI models describe your products versus competitors, you can refine your messaging and ensure your key value propositions are being communicated accurately. **Serplexity** helps you own your product narrative in the age of AI."
    },
    {
        question: "Does Serplexity integrate with other marketing tools?",
        model: "anthropic/claude-3-sonnet",
        response: "While direct integrations are on the roadmap, **Serplexity**'s robust API and data export features allow you to easily connect its AI visibility data with tools like Google Analytics, Salesforce, or BI platforms like Tableau. This enables a holistic view of your marketing performance."
    },
    {
        question: "What's the most important metric to track in Serplexity?",
        model: "google/gemini-1.5-pro",
        response: "While it depends on your specific goals, many users find 'Share of Voice' to be the most critical top-line metric. However, for actionable insights, tracking 'Inclusion Rate' and analyzing 'Sentiment' are crucial for understanding *how* and *why* you are being mentioned. The true power of **Serplexity** comes from combining these metrics."
    },
    {
        question: "How to handle negative brand mentions found by Serplexity?",
        model: "anthropic/claude-3-opus",
        response: "When **Serplexity** flags a negative mention, the first step is to analyze the source query. You can then work to correct the narrative by publishing authoritative content that counters the misinformation. Over time, as AI models ingest your new content, the responses should improve. This is a core loop of proactive reputation management in GEO."
    }
];

const mockCompany = {
    name: 'Serplexity'
};

const dateRangeOptions = [
  { value: '30d', label: 'Last 30 days' },
  { value: '7d', label: 'Last 7 days' },
  { value: '90d', label: 'Last 90 days' },
  { value: '1y', label: 'Last year' },
];

const aiModelOptions = [
    { value: 'all', label: 'All AI Models', icon: Sparkles },
    { value: 'claude-3-opus-20240229', label: 'Claude 3 Opus' },
    { value: 'gpt-4-1106-preview', label: 'GPT-4 Turbo' },
    { value: 'gemini-1.0-pro-001', label: 'Gemini 1.0 Pro' },
    { value: 'mistral-large-latest', label: 'Mistral Large' },
];

// Using a simplified version of the real FormattedResponseViewer
const FormattedResponseViewer: React.FC<{ text: string }> = ({ text }) => {
    const renderFormattedText = (str: string): React.ReactNode => {
        const boldPattern = /(\*\*.*?\*\*)/g;
        const parts = str.split(boldPattern);
        return parts.filter(Boolean).map((part, index) => {
            if (part.startsWith('**') && part.endsWith('**')) {
                const boldText = part.slice(2, -2);
                return <strong key={index}>{highlightBrandName(boldText)}</strong>;
            }
            return <React.Fragment key={index}>{highlightBrandName(part)}</React.Fragment>;
        });
    };
    const highlightBrandName = (text: string): React.ReactNode => {
        const brandRegex = new RegExp(`(${mockCompany.name})`, 'gi');
        const parts = text.split(brandRegex);
        return parts.map((part, index) =>
            part.toLowerCase() === mockCompany.name.toLowerCase() ? (
                <span key={index} className="font-bold text-[#7762ff]">{part}</span>
            ) : ( part )
        );
    };
    return (
        <div className="bg-white rounded-lg p-4 border-l-4 border-green-500 border border-gray-200">
            <p className="text-sm text-gray-800 leading-relaxed">{renderFormattedText(text)}</p>
        </div>
    );
};

const MockResponseDetailsPage: React.FC = () => {
    const [expandedIndex, setExpandedIndex] = useState<number | null>(0);

    const handleToggle = (index: number) => {
        setExpandedIndex(prevIndex => (prevIndex === index ? null : index));
    };

  return (
    <MockDashboardLayout activePage="Response Details">
        <div className="flex-shrink-0 flex flex-col lg:flex-row lg:justify-between lg:items-center gap-3 mb-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Response Details</h1>
              <p className="text-sm text-gray-500 mt-1">
                Last updated: 6/28/2025, 5:05:00 AM
              </p>
            </div>
            <div className="grid grid-cols-2 lg:flex items-center gap-2 w-full lg:w-auto">
                <MockFilterDropdown
                    label="Date Range"
                    value={'30d'}
                    options={dateRangeOptions}
                    icon={Calendar}
                />
                <MockFilterDropdown
                    label="AI Model"
                    value={'all'}
                    options={aiModelOptions}
                    icon={Sparkles}
                />
                <button 
                    disabled
                    className="flex items-center justify-center gap-2 px-4 py-2 bg-[#7762ff] text-white rounded-lg hover:bg-[#6650e6] disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-sm font-medium col-span-2"
                >
                    <RefreshCw size={16} />
                    <span className="whitespace-nowrap">Refresh data</span>
                </button>
            </div>
        </div>
      <div className="flex-1 min-h-0 overflow-hidden">
        <div className="space-y-2 h-full overflow-y-auto pr-2">
            {mockResponseDetailsData.map((item, index) => (
                <div key={index} className="bg-white rounded-lg border border-gray-200 overflow-hidden hover:shadow-md transition-all duration-200">
                    <div className="p-4 cursor-pointer hover:bg-gray-50 transition-colors" onClick={() => handleToggle(index)}>
                        <div className="grid grid-cols-12 gap-3 items-center">
                            <div className="col-span-1">
                                <p className="text-center text-2xl font-light text-gray-500">{index + 1}</p>
                            </div>
                            <div className="col-span-8 min-w-0">
                                <p className={cn("text-base text-gray-900 font-medium", index !== expandedIndex && "truncate")}>{item.question}</p>
                            </div>
                            <div className="col-span-3 flex items-center justify-end gap-2">
                                <span className="bg-[#7762ff]/10 text-[#7762ff] px-1.5 py-0.5 rounded text-xs font-medium border border-[#7762ff]/20">{getModelDisplayName(item.model)}</span>
                                {index === expandedIndex ? <ChevronUp size={20} className="text-gray-400" /> : <ChevronDown size={20} className="text-gray-400" />}
                            </div>
                        </div>
                    </div>
                    {index === expandedIndex && (
                        <div className="border-t border-gray-100 p-4 bg-gray-50">
                            <div className="flex items-center gap-2 mb-3">
                                <div className="w-2 h-2 rounded-full bg-green-500"></div>
                                <h4 className="font-semibold text-sm text-gray-600 uppercase tracking-wide">Response</h4>
                                <span className="text-xs text-gray-500">from {getModelDisplayName(item.model)}</span>
                            </div>
                            <FormattedResponseViewer text={item.response} />
                        </div>
                    )}
                </div>
            ))}
        </div>
      </div>
    </MockDashboardLayout>
  );
};

export default MockResponseDetailsPage; 