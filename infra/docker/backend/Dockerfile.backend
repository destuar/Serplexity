# ============================= BUILD STAGE =====================================
FROM node:20-alpine AS builder
RUN echo "------ Build Stage Started ------"
WORKDIR /app

# Install system dependencies including Python 3
RUN echo "System dependencies - Installing..." && \
    apk add --no-cache \
        postgresql-client \
        openssl \
        curl \
        python3 \
        py3-pip \
        python3-dev \
        build-base && \
    echo "System dependencies - Installed"

# Copy package files first for better layer caching
COPY backend/package*.json ./
RUN echo "Dependencies - Installing..." && \
    npm ci --no-audit --no-fund && \
    npm cache clean --force && \
    echo "Dependencies - Installed"

# Copy and install Python requirements
COPY backend/requirements.txt ./
RUN echo "Python dependencies - Installing..." && \
    pip3 install --no-cache-dir --break-system-packages -r requirements.txt && \
    echo "Python dependencies - Installed"

# Copy source code and config
COPY backend/tsconfig.json ./tsconfig.json
COPY backend/prisma/ ./prisma/
COPY backend/src/ ./src/

RUN echo "Prisma - Generating client..."
RUN npx prisma generate
RUN echo "Prisma - Client generated"

RUN echo "TypeScript - Compiling..."
RUN NODE_OPTIONS="--max-old-space-size=1024" npm run build || { \
        echo "Build failed. Check the logs above for errors."; \
        exit 1; \
    }
RUN echo "TypeScript - Compiled"

# Clean up dev dependencies after build
RUN npm prune --production && \
    npm cache clean --force

# Clean up unnecessary files
RUN rm -rf src tsconfig.json

# ============================= PRODUCTION STAGE =====================================
FROM node:20-alpine AS production
RUN echo "------ Production Stage Started ------"
WORKDIR /app

# Install runtime system dependencies including Python 3
RUN echo "Runtime dependencies - Installing..." && \
    apk add --no-cache \
        postgresql-client \
        openssl \
        curl \
        python3 \
        py3-pip && \
    echo "Runtime dependencies - Installed"

# Copy package files
COPY backend/package*.json ./

# Install only production dependencies
RUN echo "Production dependencies - Installing..." && \
    npm ci --omit=dev --no-audit --no-fund && \
    npm cache clean --force && \
    echo "Production dependencies - Installed"

# Copy and install Python requirements
COPY backend/requirements.txt ./
RUN echo "Python dependencies - Installing..." && \
    pip3 install --no-cache-dir --break-system-packages -r requirements.txt && \
    echo "Python dependencies - Installed"

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Copy Python agents
COPY backend/src/pydantic_agents/ ./pydantic_agents/

# Copy scripts and startup script
COPY backend/src/scripts/ ./scripts/
COPY backend/start.sh ./start.sh

# Copy Docker-specific startup script
COPY backend/docker-start.sh ./docker-start.sh

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001

# Change ownership and permissions of the app directory
RUN chmod +x ./docker-start.sh && \
    chown -R backend:nodejs /app && \
    ls -la ./docker-start.sh

USER backend

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000

CMD ["./docker-start.sh"] 