# ============================= BUILD STAGE =====================================
FROM node:20-alpine AS builder
RUN echo "------ Build Stage Started ------"
WORKDIR /app

# Install system dependencies including Python 3
RUN echo "System dependencies - Installing..." && \
    apk add --no-cache \
        postgresql-client \
        openssl \
        curl \
        python3 \
        py3-pip \
        python3-dev \
        build-base && \
    echo "System dependencies - Installed"

# Copy package files first for better layer caching
COPY backend/package*.json ./
RUN echo "Dependencies - Installing..." && \
    npm ci --no-audit --no-fund && \
    npm cache clean --force && \
    echo "Dependencies - Installed"

# Copy and install Python requirements
COPY backend/requirements.txt ./
RUN echo "Python dependencies - Installing..." && \
    pip3 install --no-cache-dir --break-system-packages -r requirements.txt && \
    echo "Python dependencies - Installed"

# Copy source code and config
COPY backend/tsconfig.json ./tsconfig.json
COPY backend/prisma/ ./prisma/
COPY backend/src/ ./src/

RUN echo "Prisma - Generating client..."
RUN npx prisma generate
RUN echo "Prisma - Client generated"

ENV NODE_OPTIONS=--max-old-space-size=3072
RUN echo "TypeScript - Compiling..."
RUN npx tsc --skipLibCheck
RUN echo "TypeScript - Compiled"
RUN echo "Listing build outputs..." && ls -la && echo "dist contents:" && ls -la dist || (echo "dist missing" && exit 1)

# Clean up dev dependencies after build
RUN npm prune --production && \
    npm cache clean --force

# Clean up unnecessary files
RUN rm -rf src tsconfig.json

# ============================= PRODUCTION STAGE =====================================
FROM node:20-alpine AS production
RUN echo "------ Production Stage Started ------"
WORKDIR /app

# Install runtime system dependencies including Python 3
RUN echo "Runtime dependencies - Installing..." && \
    apk add --no-cache \
        postgresql-client \
        openssl \
        curl \
        python3 \
        py3-pip && \
    echo "Runtime dependencies - Installed"

# Copy package files
COPY backend/package*.json ./

# Install only production dependencies
RUN echo "Production dependencies - Installing..." && \
    npm ci --omit=dev --no-audit --no-fund && \
    npm cache clean --force && \
    echo "Production dependencies - Installed"

# Copy and install Python requirements
COPY backend/requirements.txt ./
RUN echo "Python dependencies - Installing..." && \
    pip3 install --no-cache-dir --break-system-packages -r requirements.txt && \
    echo "Python dependencies - Installed"

# Create non-root user early so we can chown on COPY
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001

# Copy built application from builder stage
COPY --from=builder --chown=backend:nodejs /app/dist ./dist
COPY --from=builder --chown=backend:nodejs /app/prisma ./prisma
# DON'T copy .prisma from builder - let production generate its own

# Copy Python agents with proper structure
COPY --chown=backend:nodejs backend/src/pydantic_agents/ ./src/pydantic_agents/

# Set Python path for module imports (avoid shell var expansion warning)
ENV PYTHONPATH=/app:/app/src

# Copy startup scripts with correct ownership
COPY --chown=backend:nodejs backend/start.sh ./start.sh
COPY --chown=backend:nodejs backend/docker-start.sh ./docker-start.sh

# Generate Prisma client in production context with correct permissions
RUN echo "Generating production Prisma client..." && \
    npx prisma generate && \
    echo "Production Prisma client generated successfully" && \
    ls -la node_modules/.prisma/client/

# Ensure script is executable and present
RUN chmod +x ./docker-start.sh && \
    ls -la ./docker-start.sh && \
    echo "Testing script execution:" && \
    head -5 ./docker-start.sh

USER backend

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

EXPOSE 8000

# Start the application
CMD ["./docker-start.sh"]
