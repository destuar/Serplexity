---
description: This rule describes the Serplexity project requirements, tech stack, build process, and outline
globs: 
alwaysApply: false
---
# YOU ARE A 10X DEVELOPER / 10X ENGINEER

# Important Rules

- Think thoroughly before coding with reasoning paragraphs.
- ALWAYS ask follow-up questions to clarify the prompt and then break each task down into its atomic components.
- ALWAYS create a task.txt file that includes the task, atomic components, and potential dependencies. Check off sub-problems as you complete them.
- ALWAYS write simple, clean, and modular code.

# CodeLadder Project Rules

# Project Overview
project:
  name: "Serplexity"
  description: "Serplexity is the first agency purpose-built for Generative Engine Optimization (GEO). As generative engines like Google SGE, Perplexity, and ChatGPT reshape how users discover and trust information, traditional SEO is no longer enough. We help brands and publishers stay cited, visible, and relevant—at the sentence level. From AI visibility audits and LLM-driven content rewrites to technical GEO implementation and attribution tracking, we offer full-stack solutions to future-proof your digital presence in the era of generative search."

## Metric Development

- PAWC = (citation word share × exponential decay by position)
- AIR  = Boolean: Was the client cited at least once?
- Gap Index = potential revenue × (1 − PAWC)
- Avg Inclusion Rate = mean(PAWC across all queries)

# System Requirements
requirements:
  - Node.js ≥ 20.x (LTS)
  - PostgreSQL ≥ 15.x
  - Redis ≥ 7.x
  - AWS account with S3 bucket (public-read) and IAM user
  - Stripe account with prices configured (monthly & annual)
  - Access tokens for: OpenAI, Anthropic, Google Generative AI, Perplexity

# Technical Stack
stack:
  backend:
    language: "TypeScript"
    framework: "Express"
    orm: "Prisma"
    database: "PostgreSQL"
    queue: "BullMQ (Redis)"
    tracing: "OpenTelemetry"
    llm_providers: ["OpenAI", "Anthropic", "Gemini", "Perplexity"]
  frontend:
    language: "TypeScript"
    framework: "React"
    build_tool: "Vite"
    styling: "Tailwind CSS + Radix UI"
    state_management: "React Context + custom hooks"
  infra:
    containerization: "Docker & docker-compose"
    cloud: "AWS (ECR, ECS, S3)"

# Authorization
roles:
  USER: "Default user role"
  ADMIN: "Full system access"

# Environment Configuration
environment:
  backend:
    required:
      - DATABASE_URL
      - JWT_SECRET
      - JWT_REFRESH_SECRET
      - CORS_ORIGIN
      - NODE_ENV
      - PORT
      - GOOGLE_CLIENT_ID
      - GOOGLE_CLIENT_SECRET
      - GOOGLE_CALLBACK_URL
      - REDIS_HOST
      - REDIS_PORT
      - STRIPE_SECRET_KEY
      - STRIPE_WEBHOOK_SECRET
      - STRIPE_MONTHLY_PRICE_ID
      - STRIPE_ANNUAL_PRICE_ID
      - OPENAI_API_KEY
      - ANTHROPIC_API_KEY
      - GEMINI_API_KEY
      - PERPLEXITY_API_KEY
      - LOG_LEVEL
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
      - S3_BUCKET
  frontend:
    required:
      - VITE_API_URL

# File Upload
uploads:
  images:
    maxSize: "5MB"
    types: "image/*"
    storage: "AWS S3"
    access: "public-read"

# Development
development:
  structure: "Feature-based directories (features/)"
  frontend:
    commands:
      - "npm install"
      - "npm run dev"
    ports: 5173
  backend:
    commands:
      - "npm install"
      - "npm run dev"
    ports: 8000

# Fundamental Principles
- Write clean, simple, readable code
- Implement features in the simplest possible way
- Keep files small and focused (<200 lines)
- Test after every meaningful change
- Use clear, consistent naming
- Think thoroughly before coding with reasoning paragraphs.
- ALWAYS ask follow-up questions to clarify the prompt and break tasks down.
- ALWAYS create a task.txt file and track progress.
- ALWAYS write simple, clean, and modular code.

# Error Fixing
- DO NOT JUMP TO CONCLUSIONS! Consider multiple possible causes before deciding.
- Make only the minimal necessary changes.
- In case of strange errors, perform a Perplexity web search for up-to-date information.

# Building Process
- ALWAYS ask follow-up questions to clarify the prompt and then break each task down.
- ALWAYS create a task.txt file with atomic components and dependencies.
- DO NOT write complicated and confusing code—opt for the simple & modular approach.
- When unsure what to do, perform a web search.

# Comments
- ALWAYS add helpful, explanatory comments to our code.
- NEVER delete old comments unless they are obviously wrong/obsolete.
- Include LOTS of explanatory comments in your code. ALWAYS write well-documented code.
- Document all changes and their reasoning IN THE COMMENTS YOU WRITE.
- When writing comments, use clear, easy-to-understand language and short sentences.
  